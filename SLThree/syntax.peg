@namespace SLThree
@classname Parser
@using System.Linq;
@using System.Globalization;
@using SLThree.Extensions;

file <BaseStatement> 
    = "#SLT#" _ v:statement_list _ EOF { v }
    / "#EXPR#" _ expr:expression _ EOF { new ExpressionStatement(expr, state) }

statement_list <StatementListStatement>
    = st:statement_ws* { new StatementListStatement(st, state) }
    / st:statement { new StatementListStatement(new BaseStatement[1] {st}, state) }

statement_ws <BaseStatement>
    = _ st:statement_wspaced _ { st }
    / _ st:block_statement _ { st }
    / _ (";" _)+ { new StatementListStatement(new BaseStatement[0], state) }
    / _ st:statement _ { Panic<StatementListStatement>(new SyntaxError("Expected ;", state)) }

statement_wspaced <BaseStatement>
    = context_statement
    / switch_statement
    / foreach_statement
    / while_statement
    / condition_statement
    / st:statement _ ";" { st }

statement <BaseStatement>
    = return_statement
    / break_statement
    / continue_statement
    / using_statement
    / context_statement
    / condition_statement
    / switch_statement
    / foreach_statement
    / while_statement
    / expression_statement
    / block_statement

using_statement <UsingStatement>
    = "using" _required_ t_name:typename _required_ "as" _required_ n:name { new UsingStatement(n, new CreatorUsing(t_name, state), state) }
    / "using" _required_ t_name:typename { new UsingStatement(new CreatorUsing(t_name, state), state) }

return_statement <ReturnStatement>
    = "return" _ expr:expression { new ReturnStatement(expr, state) }
    / "return" { new ReturnStatement(state) }

break_statement <BreakStatement>
    = "break" { new BreakStatement(state) }

continue_statement <ContinueStatement>
    = "continue" { new ContinueStatement(state) }

switch_statement <BaseStatement>
    = "switch" _ "(" _ expr:expression _ ")" _ "{" _ st:case_node_list _ "}" { new SwitchStatement(expr, st, state) }

case_node_list <IList<SwitchStatement.Node>>
    = case_node*

case_node <SwitchStatement.Node>
    = _ "case" _ expr:expression _ ":" _ st:block_statement _ { new SwitchStatement.Node(expr, st, false) }
    / _ "case" _ expr:expression _ ":" _ st:statement _ ";" _ { new SwitchStatement.Node(expr, st, false) }
    / _ "case" _ expr:expression _ ":" _ { new SwitchStatement.Node(expr, null, true) }

single_or_block <StatementListStatement>
    = s:statement_wspaced { new StatementListStatement(new BaseStatement[1]{s}, state) }
    / block:block_statement { block }

block_statement <StatementListStatement>
    = "{" _ st:statement_list _ "}" { st }
    / "{" _ st:statement_list _ { Panic<StatementListStatement>(new SyntaxError("Unclosed block", state)) }

while_statement <BaseStatement>
    = "while" _ "(" _ cond:expression _ ")" _ body:single_or_block { new WhileLoopStatement(cond, body, state) }
    / "while" _ "(" _ ")" _ statement? { Panic<BaseStatement>(new SyntaxError("Empty loop head", state)) }
    / "while" _ cond:expression { Panic<BaseStatement>(new SyntaxError("Loop head must be in ( )", state)) }

foreach_statement <BaseStatement>
    = "foreach" _ "(" _ n:expression _ "in" _ iter:expression _ ")" _ body:single_or_block { new ForeachLoopStatement(n, iter, body, state) }
    
    / "foreach" _ "(" _ n:expression _ "in" _ iter:expression _ ")" _ statement? { Panic<BaseStatement>(new SyntaxError("Foreach body must be in { }", state)) }
    / "foreach" _ "(" _ n:expression _ ")" _ statement? { Panic<BaseStatement>(new SyntaxError("Foreach head must be like `x in y`", state)) }
    / "foreach" _ "(" _ ")" _ statement? { Panic<BaseStatement>(new SyntaxError("Empty loop head", state)) }
    / "foreach" _ cond:expression { Panic<BaseStatement>(new SyntaxError("Loop head must be in ( )", state)) }

condition_statement <BaseStatement>
    = "if" _ "(" _ cond:expression _ ")" _ t:single_or_block _ "else" _ f:single_or_block { new ConditionStatement(cond, t, f, state) }
    / "if" _ "(" _ cond:expression _ ")" _ t:single_or_block { new ConditionStatement(cond, t, new StatementListStatement(new BaseStatement[0], state), state) }

context_statement <BaseStatement>
    = "context" _required_ n:name _ ":" _ t:typename _ "{" _ st:statement_list _ "}" {
        new ContextStatement(new CreatorContext(n, t, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state), state)
    }
    / "context" _required_ n:name _ ":" _ t:typename {
        new ContextStatement(new CreatorContext(n, t, state), state)
    }
    / "context" _required_ n:name _  "{" _ st:statement_list _ "}" {
        new ContextStatement(new CreatorContext(n, null, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state), state)
    }
    / "context" _required_ n:name  {
        new ContextStatement(new CreatorContext(n, state), state)
    }
    / "context" _ ":" _ t:typename _ "{" _ st:statement_list _ "}" {
        new ContextStatement(new CreatorContext(null, t, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state), state)
    }
    / "context" _ ":" _ t:typename {
        new ContextStatement(new CreatorContext(t, state), state)
    }
    / "context" _  "{" _ st:statement_list _ "}" {
        new ContextStatement(new CreatorContext(st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state), state)
    }
    / "context" {
        new ContextStatement(new CreatorContext(state), state)
    }

expression_statement <ExpressionStatement> 
    = value:expression { new ExpressionStatement(value, state) }

expression <BaseExpression>
    = binary_9

binary_9 <BaseExpression> -memoize
    = left:keyword _ ("=" / "+=" / "-=" / "*=" / "/=" / "%=" / "&=" / "|=" / "^=") _ right:binary_9 { Panic<BaseExpression>(new SyntaxError("Keywords is not a valid name", state)) }
    / left:binary_9 _ "|>" _ right:binary_7 { InjectFirst(left, right) }
    / "?" _ "=" _ right:binary_9 { new BinaryAssignUnknown(right, state) }
    / left:binary_7 _ "=" _ right:binary_9 { new BinaryAssign(left, right, state) }
    / left:binary_7 _ "+=" _ right:binary_9 { new BinaryAssign(left, new BinaryAdd(left, right, state), state) }
    / left:binary_7 _ "-=" _ right:binary_9 { new BinaryAssign(left, new BinaryRem(left, right, state), state) }
    / left:binary_7 _ "*=" _ right:binary_9 { new BinaryAssign(left, new BinaryMultiply(left, right, state), state) }
    / left:binary_7 _ "/=" _ right:binary_9 { new BinaryAssign(left, new BinaryDivide(left, right, state), state) }
    / left:binary_7 _ "%=" _ right:binary_9 { new BinaryAssign(left, new BinaryMod(left, right, state), state) }
    / left:binary_7 _ "&=" _ right:binary_9 { new BinaryAssign(left, new BinaryBitAnd(left, right, state), state) }
    / left:binary_7 _ "|=" _ right:binary_9 { new BinaryAssign(left, new BinaryBitOr(left, right, state), state) }
    / left:binary_7 _ "^=" _ right:binary_9 { new BinaryAssign(left, new BinaryBitXor(left, right, state), state) }
    / left:lambda_left _ "=>" _ right:lambda_right { new LambdaExpression(new InvokeExpression(null, left.Item2, state), right, left.Item1, state) }
    / ternary_0

using_creator <CreatorUsing>
    = "new" _required_ "using" _required_ t_name:typename { new CreatorUsing(t_name, state) }

context_creator <CreatorContext>
    = "new" _required_ "context" _required_ n:name _ ":" _ t:typename _ "{" _ st:statement_list _ "}" {
        new CreatorContext(n, t, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state)
    }
    / "new" _required_ "context" _required_ n:name _ ":" _ t:typename {
        new CreatorContext(n, t, state)
    }
    / "new" _required_ "context" _required_ n:name _  "{" _ st:statement_list _ "}" {
        new CreatorContext(n, null, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state)
    }
    / "new" _required_ "context" _required_ n:name  {
        new CreatorContext(n, state)
    }
    / "new" _required_ "context" _ ":" _ t:typename _ "{" _ st:statement_list _ "}" {
        new CreatorContext(null, t, st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state)
    }
    / "new" _required_ "context" _ ":" _ t:typename {
        new CreatorContext(t, state)
    }
    / "new" _required_ "context" _  "{" _ st:statement_list _ "}" {
        new CreatorContext(st.Statements.ToArray().ConvertAll(x => CheckOnContextStatements(x)), state)
    }
    / "new" _required_ "context" {
        new CreatorContext(state)
    }

context_statements <StatementListStatement>
    = st:context_allowed_statement* { new StatementListStatement(st, state) }
    / st:context_allowed_statement { new StatementListStatement(new BaseStatement[1] {st}, state) }

context_allowed_statement <BaseStatement>
    = _ st:statement _ ";" _ { CheckOnContextStatements(st) }

ternary_0 <BaseExpression> -memoize
    = cond:ternary_0 _ "?" _ t:expression _ ":" _ f:expression { new TernaryOperator(cond, t, f, state) }
    / binary_8

binary_8 <BaseExpression> -memoize
    = lower:binary_8 _ ".." _ upper:binary_8 { new CreatorRange(lower, upper, state) }
    / null_coalescing

null_coalescing <BaseExpression>
    = left:binary_7 _ "??" _ right:null_coalescing { new NullCoalescingExpression(left, right, state) }
    / binary_7

binary_7 <BaseExpression> -memoize
    = left:binary_7 _ "||" _ right:binary_6 { new BinaryOr(left, right, state) }
    / binary_6

binary_6 <BaseExpression> -memoize
    = left:binary_6 _ "&&" _ right:binary_5 { new BinaryAnd(left, right, state) }
    / binary_5

binary_5 <BaseExpression> -memoize
    = left:binary_5 _ "&" _ right:binary_4 { new BinaryBitAnd(left, right, state) }
    / left:binary_5 _ "^" _ right:binary_4 { new BinaryBitXor(left, right, state) }
    / left:binary_5 _ "|" _ right:binary_4 { new BinaryBitOr(left, right, state) }
    / binary_4

binary_4 <BaseExpression> -memoize
    = left:binary_4 _ "==" _ right:binary_3 { new BinaryEquals(left, right, state) }
    / left:binary_4 _ "!=" _ right:binary_3 { new BinaryUnequals(left, right, state) }
    / left:binary_4 _ "is" _required_ right:typename { new BinaryIs(left, right, state) }
    / binary_3

lambda_left <ValueTuple<IList<string>, BaseExpression[]>>
    = mods:method_modificator_list? _ "(" _ ")" { new ValueTuple<IList<string>, BaseExpression[]>(mods.Count == 0 ? new string[0] : mods[0], new BaseExpression[0]) }
    / mods:method_modificator_list? _ "(" _ args:names_arguments_list _ ")" { new ValueTuple<IList<string>, BaseExpression[]>(mods.Count == 0 ? new string[0] : mods[0], args.ToArray()) }
    / mods:method_modificator_list _required_ a:name { new ValueTuple<IList<string>, BaseExpression[]>(mods, new BaseExpression[1] { a } ) }
    / a:name { new ValueTuple<IList<string>, BaseExpression[]>(new string[0], new BaseExpression[1] { a } ) }

lambda_right <StatementListStatement>
    = st:expression_statement { new StatementListStatement(new BaseStatement[1] { new ReturnStatement(st.Expression, state) }, state) }
    / "{" _ st:statement_list _ "}" { st }

method_modificator_list <IList<string>>
    = m1:method_modificator m2p:other_modificators { m2p.AddAndRet(m1) }
    / m1:method_modificator { new string[1] { m1 } }

other_modificators <IList<string>>
    = _required_ m2p:method_modificator+ { m2p }

method_modificator
    = implicit_keyword
    / recursive_keyword
    
recursive_keyword
    = s:"recursive" { s }
implicit_keyword
    = s:"implicit" { s }

binary_3 <BaseExpression> -memoize
    = left:binary_3 _ ">=" _ right:binary_2 { new BinaryGreaterThanEquals(left, right, state) }
    / left:binary_3 _ "<=" _ right:binary_2 { new BinaryLessThanEquals(left, right, state) }
    / left:binary_3 _ ">" _ right:binary_2 { new BinaryGreaterThan(left, right, state) }
    / left:binary_3 _ "<" _ right:binary_2 { new BinaryLessThan(left, right, state) }
    / binary_2

binary_2 <BaseExpression> -memoize
    = left:binary_2 _ "+" _ right:binary_1 { new BinaryAdd(left, right, state) }
    / left:binary_2 _ "-" _ right:binary_1 { new BinaryRem(left, right, state) }
    / binary_1

binary_1 <BaseExpression> -memoize
    = left:binary_1 _ "*" _ right:binary_0 { new BinaryMultiply(left, right, state) }
    / left:binary_1 _ "/" _ right:binary_0 { new BinaryDivide(left, right, state) }
    / left:binary_1 _ "%" _ right:binary_0 { new BinaryMod(left, right, state) }
    / binary_0

binary_0 <BaseExpression> -memoize
    = left:binary_0 _ "as" _required_ right:typename { new CastExpression(left, right, state) }
    / left:binary_0 _ "::" _ right:name _ "<" _ gen_args:typename_list _ ">" _ "(" _ args:typename_list _ ")" {
        new ReflectionExpression(left, right, gen_args.ToArray(), args.ToArray(), state)
    }
    / left:binary_0 _ "::" _ right:name _ "<" _ gen_args:typename_list _ ">" _ "(" _ ")" {
        new ReflectionExpression(left, right, gen_args.ToArray(), new TypenameExpression[0], state)
    }
    / left:binary_0 _ "::" _ right:name _ "(" _ args:typename_list _ ")" {
        new ReflectionExpression(left, right, null, args.ToArray(), state)
    }
    / left:binary_0 _ "::" _ right:name  _ "(" _ ")" {
        new ReflectionExpression(left, right, null, new TypenameExpression[0], state)
    }
    / left:binary_0 _ "::" _ right:name  {
        new ReflectionExpression(left, right, state)
    }
    / _ left:binary_min _ { left }

binary_min <BaseExpression>
    = unary

unary <BaseExpression>
    = "+" _ left:binary_min { new UnaryAdd(left, state) }
    / i8:("-" _ ([0-9_]+ ("i8"))) { new SByteLiteral(sbyte.Parse(i8.Replace("i8", "").Replace("_", ""), CultureInfo.InvariantCulture), i8, state) }
    / i16:("-" _ ([0-9_]+ ("i16"))) { new ShortLiteral(short.Parse(i16.Replace("i16", "").Replace("_", ""), CultureInfo.InvariantCulture), i16, state) }
    / i32:("-" _ ([0-9_]+ ("i32"))) { new IntLiteral(int.Parse(i32.Replace("i32", "").Replace("_", ""), CultureInfo.InvariantCulture), i32, state) }
    / i64:("-" _ ([0-9_]+ ("i64"))) { new LongLiteral(long.Parse(i64.Replace("i64", "").Replace("_", ""), CultureInfo.InvariantCulture), i64, state) }
    / "-" _ left:binary_min { new UnaryRem(left, state) }
    / "~" _ left:binary_min { new UnaryBitNot(left, state) }
    / "!" _ left:binary_min { new UnaryNot(left, state) }
    / "^" _ left:binary_min { new UnaryChoose(left, state) }
    / "*" _ "<" _ arg:typename _ ">" _ left:binary_min { new UnaryGetChooser(left, arg, state) }
    / "*" _ left:binary_min { new UnaryGetChooser(left, null, state) }
    / "@@" _ left:typename { new UnaryStaticReflection(left, state) }
    / "@" _ left:typename { new UnaryReflection(left, state) }
    / primary

primary <BaseExpression> -memoize
    = left:primary _ "(" _ args:arguments_list _ ")" { new InvokeExpression(left, args.ToArray(), state) }
    / left:primary _ "(" _ ")" { new InvokeExpression(left, new BaseExpression[0], state) }
    / left:primary _ "[" _ args:arguments_list _ "]" { new IndexExpression(left, args.ToArray(), state) }
    / left:primary _ "." _ right:access_right { new MemberAccess(left, right, state) }
    / "(" _ x:expression _ ")" { x.RaisePriority() }
    / dictionary_creator
    / context_creator
    / using_creator
    / "new" _required_ right:typename _ "(" _ args:arguments_list _ ")" { new NewExpression(right, args.ToArray(), state) }
    / "new" _required_ right:typename _ "(" _ ")" { new NewExpression(right, state) }
    / array_creator
    / tuple_creator
    / list_creator
    / name_literal
    / special
    / name
    / literal
    / "[" _ x:expression { Panic<BaseExpression>(new SyntaxError("Unclosed brackets", state)) }
    / "(" _ x:expression { Panic<BaseExpression>(new SyntaxError("Unclosed brackets", state)) }

access_right <BaseExpression> -memoize
    = left:name _ "(" _ args:arguments_list _ ")" { new InvokeExpression(left, args.ToArray(), state) }
    / left:name _ "(" _ ")" { new InvokeExpression(left, new BaseExpression[0], state) }
    / right:access_right { right }
    / right:name { right }

typename_list <IList<TypenameExpression>>
    = first:typename _ last:typename_other* { last.AddAndRet(first) }
    / tn:typename { new TypenameExpression[1] {tn} }

typename_other <TypenameExpression>
    = "," _ x:typename _ { x }

typename <TypenameExpression>
    = t_node:typename_node _ "<" _ t_list:typename_list _ ">" { new TypenameExpression(t_node, t_list.ToArray(), state) }
    / t_node:typename_node { new TypenameExpression(t_node, state) }

typename_node <BaseExpression> -memoize
    = left:typename_node _ "." _ right:name { new MemberAccess(left, right, state) }
    / special
    / name

dictionary_creator <BaseExpression>
    = "{" _ etrs:dictionary_entries _ ("," _ )? "}" { new CreatorDictionary(etrs.ToArray(), state) }
    / "{" _ "}" { new CreatorDictionary(new CreatorDictionary.Entry[0], state) }

dictionary_entries <IList<CreatorDictionary.Entry>>
    = first:dictionary_entry _ oth:other_entry* { oth.AddAndRet(first) }
    
other_entry <CreatorDictionary.Entry> = ("," _ a:dictionary_entry _ ) { a }

dictionary_entry <CreatorDictionary.Entry>
    = left:primary _ ":" _ right:expression { new CreatorDictionary.Entry(left, right, state) }

tuple_creator <BaseExpression>
    = "(" _ args:arguments_list _ ("," _ )? ")" { new CreatorTuple(args.ToArray(), state) }

list_creator <BaseExpression>
    = "[" _ args:arguments_list _ ("," _ )? "]" { new CreatorList(args.ToArray(), state) }
    / "[" _ "]" { new CreatorList(new BaseExpression[0], state) }

array_creator <BaseExpression>
    = "new" _required_ tp:typename _ "[" _ size:expression _ "]" { new CreatorArray(tp, size, state) }

generic_types <IList<BaseExpression>>
    = "<" _ l:names_arguments_list _ ">" { l }
    // "<" gens:( _ "," _ )* ">" { new BaseExpression[1] { new IntLiteral(gens.Count, state) } }

arguments_list <IList<BaseExpression>>
    = a:argument _ o:other_arg* { o.AddAndRet(a) }

other_arg <BaseExpression> = ("," _ a:argument _ ) { a }

argument <BaseExpression> = expression

names_arguments_list <IList<BaseExpression>>
    = a:arg_name _ o:other_arg_name* { o.AddAndRet(a) }

other_arg_name <BaseExpression> = ("," _ a:arg_name _ ) { a }

arg_name <NameExpression>
    = name

name_literal <BaseExpression>
    = b:("true"/"false") { new BoolLiteral(bool.Parse(b), state) }
    / "null" { new NullLiteral(state) }

special <BaseExpression>
    = "global" { new GlobalLiteral(state) }
    / "super" { new SuperLiteral(state) }
    / "upper" { new UpperLiteral(state) }
    / "this" { new ThisLiteral(state) }
    / "self" { new SelfLiteral(state) }

literal <BaseExpression>
    = percent_literal
    / float_literal

    / "0b" i8:([01_]+ ("i8"))       { new SByteLiteral  (Convert.ToSByte    (i8.Replace("i8", "").Replace("_", ""), 2), "0b"+i8, state) }
    / "0b" u8:([01_]+ ("u8"))       { new ByteLiteral   (Convert.ToByte     (u8.Replace("u8", "").Replace("_", ""), 2), "0b"+u8, state) }
    / "0b" i16:([01_]+ ("i16"))     { new ShortLiteral  (Convert.ToInt16    (i16.Replace("i16", "").Replace("_", ""), 2), "0b"+i16, state) }
    / "0b" u16:([01_]+ ("u16"))     { new UShortLiteral (Convert.ToUInt16   (u16.Replace("u16", "").Replace("_", ""), 2), "0b"+u16, state) }
    / "0b" i32:([01_]+ ("i32"))     { new IntLiteral    (Convert.ToInt32    (i32.Replace("i32", "").Replace("_", ""), 2), "0b"+i32, state) }
    / "0b" u32:([01_]+ ("u32"))     { new UIntLiteral   (Convert.ToUInt32   (u32.Replace("u32", "").Replace("_", ""), 2), "0b"+u32, state) }
    / "0b" u64:([01_]+ ("u64"))     { new ULongLiteral  (Convert.ToUInt64   (u64.Replace("u64", "").Replace("_", ""), 2), "0b"+u64, state) }
    / "0b" i64:([01_]+ ("i64")?)    { new LongLiteral   (Convert.ToInt64    (i64.Replace("i64", "").Replace("_", ""), 2), "0b"+i64, state) }
    / "0b" .* { Panic<BaseExpression>(new RuntimeError("Wrong binary literal", state)) }

    / "0x" i8:([0-9A-Fa-f_]+ ("i8"))       { new SByteLiteral  (Convert.ToSByte    (i8.Replace("i8", "").Replace("_", ""), 16), "0x"+i8, state) }
    / "0x" u8:([0-9A-Fa-f_]+ ("u8"))       { new ByteLiteral   (Convert.ToByte     (u8.Replace("u8", "").Replace("_", ""), 16), "0x"+u8, state) }
    / "0x" i16:([0-9A-Fa-f_]+ ("i16"))     { new ShortLiteral  (Convert.ToInt16    (i16.Replace("i16", "").Replace("_", ""), 16), "0x"+i16, state) }
    / "0x" u16:([0-9A-Fa-f_]+ ("u16"))     { new UShortLiteral (Convert.ToUInt16   (u16.Replace("u16", "").Replace("_", ""), 16), "0x"+u16, state) }
    / "0x" i32:([0-9A-Fa-f_]+ ("i32"))     { new IntLiteral    (Convert.ToInt32    (i32.Replace("i32", "").Replace("_", ""), 16), "0x"+i32, state) }
    / "0x" u32:([0-9A-Fa-f_]+ ("u32"))     { new UIntLiteral   (Convert.ToUInt32   (u32.Replace("u32", "").Replace("_", ""), 16), "0x"+u32, state) }
    / "0x" u64:([0-9A-Fa-f_]+ ("u64"))     { new ULongLiteral  (Convert.ToUInt64   (u64.Replace("u64", "").Replace("_", ""), 16), "0x"+u64, state) }
    / "0x" i64:([0-9A-Fa-f_]+ ("i64")?)    { new LongLiteral   (Convert.ToInt64    (i64.Replace("i64", "").Replace("_", ""), 16), "0x"+i64, state) }
    / "0x" .* { Panic<BaseExpression>(new RuntimeError("Wrong hexadecimal literal", state)) }

    / "0o" i8:([0-7_]+ ("i8"))       { new SByteLiteral  (Convert.ToSByte    (i8.Replace("i8", "").Replace("_", ""), 8), "0o"+i8, state) }
    / "0o" u8:([0-7_]+ ("u8"))       { new ByteLiteral   (Convert.ToByte     (u8.Replace("u8", "").Replace("_", ""), 8), "0o"+u8, state) }
    / "0o" i16:([0-7_]+ ("i16"))     { new ShortLiteral  (Convert.ToInt16    (i16.Replace("i16", "").Replace("_", ""), 8), "0o"+i16, state) }
    / "0o" u16:([0-7_]+ ("u16"))     { new UShortLiteral (Convert.ToUInt16   (u16.Replace("u16", "").Replace("_", ""), 8), "0o"+u16, state) }
    / "0o" i32:([0-7_]+ ("i32"))     { new IntLiteral    (Convert.ToInt32    (i32.Replace("i32", "").Replace("_", ""), 8), "0o"+i32, state) }
    / "0o" u32:([0-7_]+ ("u32"))     { new UIntLiteral   (Convert.ToUInt32   (u32.Replace("u32", "").Replace("_", ""), 8), "0o"+u32, state) }
    / "0o" u64:([0-7_]+ ("u64"))     { new ULongLiteral  (Convert.ToUInt64   (u64.Replace("u64", "").Replace("_", ""), 8), "0o"+u64, state) }
    / "0o" i64:([0-7_]+ ("i64")?)    { new LongLiteral   (Convert.ToInt64    (i64.Replace("i64", "").Replace("_", ""), 8), "0o"+i64, state) }
    / "0o" .* { Panic<BaseExpression>(new RuntimeError("Wrong octal const", state)) }

    / i8:([0-9_]+ ("i8"))       { new SByteLiteral  (sbyte.Parse    (i8.Replace("i8", "").Replace("_", ""), CultureInfo.InvariantCulture), i8, state) }
    / u8:([0-9_]+ ("u8"))       { new ByteLiteral   (byte.Parse     (u8.Replace("u8", "").Replace("_", ""), CultureInfo.InvariantCulture), u8, state) }
    / i16:([0-9_]+ ("i16"))     { new ShortLiteral  (short.Parse    (i16.Replace("i16", "").Replace("_", ""), CultureInfo.InvariantCulture), i16, state) }
    / u16:([0-9_]+ ("u16"))     { new UShortLiteral (ushort.Parse   (u16.Replace("u16", "").Replace("_", ""), CultureInfo.InvariantCulture), u16, state) }
    / i32:([0-9_]+ ("i32"))     { new IntLiteral    (int.Parse      (i32.Replace("i32", "").Replace("_", ""), CultureInfo.InvariantCulture), i32, state) }
    / u32:([0-9_]+ ("u32"))     { new UIntLiteral   (uint.Parse     (u32.Replace("u32", "").Replace("_", ""), CultureInfo.InvariantCulture), u32, state) }
    / u64:([0-9_]+ ("u64"))     { new ULongLiteral  (ulong.Parse    (u64.Replace("u64", "").Replace("_", ""), CultureInfo.InvariantCulture), u64, state) }
    / i64:([0-9_]+ ("i64")?)    { new LongLiteral   (long.Parse     (i64.Replace("i64", "").Replace("_", ""), CultureInfo.InvariantCulture), i64, state) }

    / interpolated_string
    / string_literal
    / char_literal

percent_literal <DoubleLiteral>
    = f64:([0-9_]+ ("."[0-9_]+)? "%") { new DoubleLiteral(double.Parse(f64.Replace("f64", "").Replace("_", "").Replace("%", ""), CultureInfo.InvariantCulture) / 100.0, f64, state) }

float_literal <BaseExpression>
    = f32:([0-9_]+ ("." [0-9_]+)? ("f32"))    { new FloatLiteral(float.Parse(f32.Replace("f32", "").Replace("_", ""), CultureInfo.InvariantCulture), f32, state) }
    / f64:([0-9_]+ ("." [0-9_]+) ("f64")?)    { new DoubleLiteral(double.Parse(f64.Replace("f64", "").Replace("_", ""), CultureInfo.InvariantCulture), f64, state) }
    / f64:([0-9_]+ ("f64"))                  { new DoubleLiteral(double.Parse(f64.Replace("f64", "").Replace("_", ""), CultureInfo.InvariantCulture), f64, state) }

identifier <BaseExpression>
    = name

keyword
    = "while" / "if" / "else" / "foreach" / "return" / "break" / "continue" / "using" / "which" / "typeof" / "context" / "self" / "upper" / "this" / "global"

name <NameExpression>
    = first:available_name { new NameExpression(first.JoinIntoString(""), state) }

interpolated_string <InterpolatedString> = "$\"" chars:interpolated_start exp:interpolated_expression* ("\"" / #ERROR{ "Expected '\"'" }) {
    new InterpolatedString(chars, exp, state)
}

interpolated_expression <ValueTuple<BaseExpression, string>> = ("{" expr:interpolation "}" s:interpolated_mid?) { new ValueTuple<BaseExpression, string>(expr, s.JoinIntoString("")) }

interpolated_start = chars:interpolated_mid? { chars.JoinIntoString("") }

interpolated_mid = chars:interpolated_element+ { chars.JoinIntoString("") }

interpolated_element
    = interpolation_escape
    / string_escape
    / [^\\\t\r\n\"{}]

interpolation_escape
    = "{{" { "{{" }
    / "}}" { "}}" }

interpolation
    = expression

string_literal <StringLiteral> = "\"" chars:string_element* ("\"" / #ERROR{ "Expected '\"'" }) {
    new StringLiteral(string.Concat(chars), state)
}

char_literal <CharLiteral>
    = "'" c:char_element "'" { new CharLiteral(c[0], state) }

char_element
    = char_escape
    / string_element

char_escape
    = "\\\\'" { "'" }

string_element
    = string_escape
    / [^\\\t\r\n\"]

string_escape
    = "\\\\" { "\\" }
    / "\\t" { "\t" }
    / "\\n" { "\n" }
    / "\\r" { "\r" }
    / "\\\"" { "\"" }

available_name <IList<string>>
    = value:([a-zA-Z_] [a-zA-Z0-9_]*)+ { value }

comment
    = "//" ([^\r\n]*)

_required_
    = [ \t]+ comment _ { " " }
    / comment _ { " " }
    / [ \t\r\n]+ { " " }

_ -memoize
    = _ comment _ { "" }
    / [ \t]* comment _ { "" }
    / [ \t\r\n]* { "" }

EOF = !. / comment / c:. { Panic<string>(new UnexpectedError(c[0], state)) }
