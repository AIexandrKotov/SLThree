------ 0.9.0 Massive Update ------ [~.~.~]
Language:
    - Template methods
        - Add the `template` modificator to generic method
          `template f<T>() => T;`
        - Constraints on parameters
          `template<T1: value + i64 | u64,
                    T2: => (T2 >= 10)>() => T1 + T2;`
        - Constraint expression to describe them in advance
          `constraint [Name][ on T]: expr | value`
        - Invokation (and making without `()`):
          `template f<T>() {
               x(a1, a2) => (a1, a2);
               return x(T, T as is);
           }
           f<as value : (2 + 2)>();
           f<as expr : (2 + 2)>();
           f<as value = (2 + 2)>();`
    - Blocks `{...}` is expressions now
    - Contextual reference and dereference: `&T`, `*T`
      Reference links the expression to the context
      Dereferencing executes referenced expression in it
    - Defining methods with default parameters
      `(x = 5, y = 10) => x + y;`
    - `params` modificator:
      `params f(args) => args;`
      `args(1, 2, 3); //[1, 2, 3]`
    - Calling methods with a variable number of arguments
    - Constant variables and parameters
      `const x = 2; f(const x) => x += 1;`
    - Accord expression `accord (x, y) { (i64, i64) => true; }`
      Syntax sugar for type-matching
    - Dictionary initializers new syntax:
      `new dict { 1: 2, 3: 4 }`
      `new dict<i64, i64> { 1: 2, 3: 4 }`
    - Array and list initializers new syntax:
      `new array { 1, 2, 3, 4 }`
        - Also supports: stack, queue, set
    - Short initializers:
        - Array: `new { 1, 2, 3 }`
        - Dictionary: `new { 1: 2, 3: 4 }`
        - Context without private context: `new {...}`
    - Multiline interpolated strings $"""str{2}""";
    - Multiline strings """str"""
    - Changed match expression arrow `==>` -> `=>`
    - Atoms `$name` (~like in Erlang)
      Actually is compile-time SHA-1 by name
    - Do-while loop
      `do {;} while (true);`
    - Finite loop
      `loop (10) (using console).writeln(i += 1);`
    - Infinite loop
      `loop (using console).writeln(i += 1);`
    - Enumerable-slices `[ [Lower]..[=][Upper] ]`
    - New get chooser syntax:
      `*[1, 2, 3]` -> `^:[1, 2, 3]`
    - Expressions and code initilizers:
      `${ return; }`, `$(2 + 2)` like `(2 + 2) as is`
    - In-Context invokator operator `->`: `ctx->expression`
        - Runtime analog `-->`: `ctx-->$(expression)`
    - Syntax for creating methods from generics:
      `_is<T>(a) => a is T; isi64 = _is<i64>;`
    - Now you can use string and numeric literals as a name
      In any place where it was possible hint the type of variable
      `1 = 2;`, `f(1) => self.1;`
      As right operand of `.`: `self.1`, `self."Var Name"`
      And also in invokations: `"Var Name"(a, b)`
    - Null-coalescing augmented assign operator `??=`
    - Shift operators: `<<`, `>>`, `>>>`
    - Now you can define variables in the method from the outside
      via 'funcname.inside` and `funcname.defaults` contexts
    - Dividing ranges into `..` and `..=` (including last)
    - Errors localization
Bugfixes:
    - Ignoring deffered code in static (#129)
    - Ignoring indexed properties in wrappers (#130)
    - Generic supporting for 0.8 initializers (#131)
    - Arrays supporting in static typeof (#132)
    - Generic cloning policy is now lossless
    - Indentation supporting in $-strings (#133)
    - Whitespace after comma fix (#135)