------ 0.9.0 Parameters Update ------ [~.~.~]
Language:
    - New generic methods
        - For now need to add the `template` modificator
          `template f<T>() => T;`
        - Constraints on parameters
          `<T1: value + i64 | u64, T2: => T2 >= 10>() => T1 + T2;`
        - Constraint expression to describe them in advance
          `constraint [Name][ on T]: expr | value`
        - Invokation (and making without `()`):
          `template f<T>() {
               x(a1, a2) => (a1, a2);
               return x(T, T as is);
           }
           f<as value : (2 + 2)>();
           f<as expr : (2 + 2)>();
           f<as value = (2 + 2)>();`
        - New entity for code generation - Macros
          Macros clearly store the context in which they were created
          `$(2 + 2)`, `${using linq;}`
          Assignation by variable reference macros
          `a = 2; ra = $(a); ra $= 4; a == 4;`
          This reference can also be passed as generic parameter
    - Blocks `{...}` is expressions now
    - Dictionary initializers new syntax:
      `new dict { 1: 2, 3: 4 }`
      `new dict<i64, i64> { 1: 2, 3: 4 }`
    - Array and list initializers new syntax:
        - Also supports: stack, queue
          `new array { 1, 2, 3, 4 }`
          `new list<i64> { 1, 2, 3, 4 }`
    - Short initializers:
        - Array
        `new { 1, 2, 3 }`
        - Dictionary
        `new { 1: 2, 3: 4 }`
        - Context without private context
        `new {...}`
    - Syntax sugar for overloading methods
    - Defining methods with default parameters
      `(x = 5, y = 10) => x + y;`
    - `params` modificator:
      `params f(args) => args;`
      `args(1, 2, 3); //[1, 2, 3]`
    - Calling methods with a variable number of arguments
    - Syntax for creating methods from generics:
      `_is<T>(a) => a is T; isi64 = _is<i64>;`
    - Null-coalescing augmented assign operator `??=`
Bugfixes:
    - Ignoring deffered code in static (#129)
    - Ignoring indexed properties in wrappers (#130)
    - Generic supporting for 0.8 initializers (#131)
    - Arrays supporting in static typeof (#132)
    - Generic cloning policy is now lossless
    - Indentation supporting in $-strings (#133)