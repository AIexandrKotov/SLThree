recursive explicit Name<T>(args): Ret {
};
recursive explicit Name(args): Ret {
};
recursive explicit <T>(args): Ret {
};
recursive explicit (args): Ret {
};
recursive explicit Name<T>(args) {
};
recursive explicit Name(args) {
};
recursive explicit <T>(args) {
};
recursive explicit (args) {
};
Name<T>(args): Ret {
};
Name(args): Ret {
};
<T>(args): Ret {
};
(args): Ret {
};
Name<T>(args) {
};
Name(args) {
};
<T>(args) {
};
(args) {
};
recursive explicit Name<T>(args): Ret => {
    2;
};
recursive explicit Name(args): Ret => {
    2;
};
recursive explicit <T>(args): Ret => {
    2;
};
recursive explicit (args): Ret => {
    2;
};
recursive explicit Name<T>(args) => {
    2;
};
recursive explicit Name(args) => {
    2;
};
recursive explicit <T>(args) => {
    2;
};
recursive explicit (args) => {
    2;
};
Name<T>(args): Ret => {
    2;
};
Name(args): Ret => {
    2;
};
<T>args: Ret => {
    2;
};
args: Ret => {
    2;
};
Name<T>(args) => {
    2;
};
Name(args) => {
    2;
};
<T>args => {
    2;
};
args => {
    2;
};
recursive explicit Name<T>(args): Ret => 2;
recursive explicit Name(args): Ret => 2;
recursive explicit <T>(args): Ret => 2;
recursive explicit (args): Ret => 2;
recursive explicit Name<T>(args) => 2;
recursive explicit Name(args) => 2;
recursive explicit <T>(args) => 2;
recursive explicit (args) => 2;
Name<T>(args): Ret => 2;
Name(args): Ret => 2;
<T>args: Ret => 2;
args: Ret => 2;
Name<T>(args) => 2;
Name(args) => 2;
<T>args => 2;
args => 2;
ArgT arg: Ret => {
    2;
};
ArgT arg => {
    2;
};
arg: Ret => {
    2;
};
arg => {
    2;
};
ArgT arg: Ret => 2;
ArgT arg => 2;
arg: Ret => 2;
arg => 2;